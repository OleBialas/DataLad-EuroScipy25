---
title: Exercise Review 1
subtitle: Working with DataLad Datasets 
format: clean-revealjs
filters:
  - timer
html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
author:
  - name: MichaÅ‚ Szczepanik
    email: m.szczepanik@fz-juelich.de
    affiliations: Research Center Juelich
  - name: Ole Bialas
    email: bialas@uni-bonn.de
    affiliations: University of Bonn
date: 08-19-2025
---

## Consuming an Existing DataLad Dataset

::: {.incremental}
- `datalad clone` is fast because it only downloads symbolic **file links**
- `datalad get` downloads the actual **file content**
- Useful for working on very large datasets:
  - `datalad clone <dataset>`
  - `datalad get <file>`
  - `python <script>`
  - `datalad drop <file>`
- This works because DataLad manages the **file identifiers**  that uniquely associate every links with it's corresponding file content
:::

## A Meta View

![](img/always-has-been-identifiers.jpeg){fig-alt="astronaut meme: wait it's all identifiers? always has been"}

::: {.notes}
- This means file identifiers are central to how datalad works so lets take a moment to dive into some of the details here
:::

## Provider and Manager of Identifiers

::: {.incremental}
- DataLad provides globally unique, persistent identifiers (without a central issuing service; offline and portable)

- Concept identifiers (*think: where can I find things?*)
  - for datasets: DataLad dataset ID
  - for files in a dataset: DataLad dataset ID + path within a dataset
- Content/version identifiers (*think: where can the computer find things?*)
  - for datasets: Git commit SHA ID
  - for files: Git blob SHA / Git-annex key

- By tracking unique identifiers, DataLad can manage files across multiple sources
:::

::: {.notes}
- DataLad dataset ID - show `cat .datalad/config` (there are more configuration options)
- File identifiers - show `git annex info examples/gentoo.jpg`
- Mutliple sources - show `git annex whereis examples/gentoo.jpg`
:::

## What is a DataLad Dataset?

::: {.incremental}
- a container for **metadata** on the evolution of a collection of files
  - content identity (*think: checksums*)
  - content availability (*think: URLs*)
  - provenance of change (*think: who did what when?*)
- a regular, but **managed** directory on computer file system
  - provides a familiar look and feel of files and folders
- a **Git** repository
  - compatible with anything that can handle Git repositories
- a **git-annex** repository for storing, tracking and transporting file content
    - supports any storage service and transport protocol supported by git-annex
:::

::: {.notes}
So now we can answer the question: What actually is a DataLad dataset? -> go through the items
So in a nutshell, DataLad integrates and extends Git and git-annex with additional features and infrastructure support. For example, it allows you to deposite datasets to and retrieve them from non-Git-aware sites.
:::

## Hands-on: Tracking Changes

- Open the **Exercises Part 2** on the tutorial website ðŸ“–

<iframe src="https://olebialas.github.io/DataLad-EuroScipy25/" width="100%" height="500px" frameborder="1" ></iframe>

::: {.notes}
- Let's move to out second set of exercises!
- In these exercises, you'll be able to see for your selfes how DataLad tracks the evolution of a dataset
- You'll also explore a very useful feature of DataLad which is it's ability to run and rerun code while keeping track of the inputs and outputs which implicitly builds a pipeline for your data analysis
:::

## Hands-on: Tracking Changes

:::{.timer #UNIQUE-ID seconds=1200 starton=interaction}
:::
![](./img/qr.png){.absolute top=50 right=200 width="300" height="300"}

- Website: [olebialas.github.io/DataLad-EuroScipy25](https://olebialas.github.io/DataLad-EuroScipy25/)
- Go to: *Exercises* > *Part2: Tracking Changes*


