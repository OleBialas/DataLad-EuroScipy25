---
title: Exercise Review 3
subtitle: Creating Backups and Sharing DataLad Datasets
format: clean-revealjs
html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
author:
  - name: Michał Szczepanik
    email: m.szczepanik@fz-juelich.de
    affiliations: Research Center Juelich
  - name: Ole Bialas
    email: bialas@uni-bonn.de
    affiliations: University of Bonn
date: 08-19-2025
---

## Using a Bare Git Repository as Push Target

::: {.incremental}
- bare == no worktree
  - contents of `.git` directly in the directory
  - when shared pushes can't break the worktree
  - can be put on a server [^1]
- with git-annex on the machine, can store git+annex
- good default for Git & git-annex aware services
:::

::: {.notes}
Demo: `git init --bare ~/penguins_backup`
:::

[^1]: <https://git-scm.com/book/en/v2/Git-on-the-Server-Getting-Git-on-a-Server>

## What Contents Are Actually being pushed?

::: {.incremental}
- Any git repository (local or online) can be added as a dataset sibling
- The first push initializes the repository’s annex ID, the second push actually tranfers the files
- `datalad push` acts on the contents you already got
  - to transfer specific files, use `datalad get` first
- `git annex copy [--from=remote|--to=remote]` to download and upload (no magic)
:::

::: {.notes}
- Sibling demo: `datalad siblings add --name backup --url ~/penguins_backup`
- push demo: `datalad push --to backup` (twice)
- Note that DataLad will only push the files that are present in the current repository. For files that are not present, we have to use `datalad get` first
- Alternatively, you can use `git annex copy` which does the download and upload in one step
:::

## git-annex *Special Remotes*

- store and retrieve file content (not Git repo)[^2]
- `git annex initremote ...`
- built-in and external implementations
  - <https://git-annex.branchable.com/special_remotes/>

[^2]: but actually also Git repo bundles, with [git-remote-annex](https://git-annex.branchable.com/tips/storing_a_git_repository_on_any_special_remote/)

## 3rd Party Services

![](img/services.svg){.center}

::: {.notes}
DataLad supports a variety of third party services - some are by default, others via a dedicated extension. In the DataLad handbook (which is linked on our website), you'll find tutorials for many different storage services.
In the bonus exercises for this notebook you can explore hosting your dataset on GIN which is the service we used for the penguins dataset
:::

## Distributed Data Management

- recall `git annex whereis` (n copies)
- keyword: *distributed data management*
  - can have multiple special remotes
- git annex configuration:
  - [preferred content](https://git-annex.branchable.com/preferred_content/)
  - [numcopies](https://git-annex.branchable.com/git-annex-numcopies/)
