---
title: Introduction to DataLad
subtitle: Data Management for Open Science
format: clean-revealjs
filters:
 - timer
html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
author:
  - name: MichaÅ‚ Szczepanik
    email: m.szczepanik@fz-juelich.de
    affiliations: Research Center Juelich
  - name: Ole Bialas
    email: bialas@uni-bonn.de
    affiliations: University of Bonn
date: 08-19-2025
---

## About us

::: {.fragment}
:::: {.columns}

::: {.column width="40%"}
<figure style="display: inline-block; text-align: center; margin: 0px 20px 20px 20px;">
  <img src="https://ibehave.nrw/wp-content/uploads/2023/04/photo_ole_bialas.jpg" style="border-radius: 50%; width: 200px; height: 200px; object-fit: cover;">
  <figcaption style="margin-top: -15px; font-size: 24px; color: #4a9fb3;">Ole</figcaption>
</figure>
:::

::: {.column width="60%"}
- PhD in neuroscience researching auditory perception
- Research software consultant at the University of Bonn
- DataLad user for ~5 years
:::

::::
:::

::: {.fragment}
:::: {.columns}

::: {.column width="40%"}
<figure style="display: inline-block; text-align: center; margin: 0px 20px 20px 20px;">
  <img src="https://www.fz-juelich.de/profile/szczepanik_m/@@images/408bf6a5-b7ea-4a70-8342-48c4dc18d71e.jpeg" style="border-radius: 50%; width: 200px; height: 200px; object-fit: cover;">
  <figcaption style="margin-top: -15px; font-size: 24px; color: #4a9fb3;">MichaÅ‚</figcaption>
</figure>
:::

::: {.column width="60%" style="margin-top: 20px;"}
- PhD in (cognitive) neuroscience -- emotional contagion
- RDM / RSE at the Forschungszentrum JÃ¼lich
- DataLad contributor since ~4 years
:::

::::
:::

::: {.notes}
- My name is Ole, I'm a neuroscientist by training, working as a research software consultant at the University of Bonn and I have been using DataLad for several years in my own research projects
- With me is Michal who is also a neuroscientist and part of the DataLad development team at the research center in Juelich
:::

## Resources

- Website: [olebialas.github.io/DataLad-EuroScipy25](https://olebialas.github.io/DataLad-EuroScipy25/)
- Contains installation instructions, slides and exercises

![](./img/qr.png){.absolute top=-50 right=0 width="250" height="250"}

<iframe src="https://olebialas.github.io/DataLad-EuroScipy25/" width="100%" height="400px" frameborder="1" ></iframe>

::: {.notes}
- There is a website for this tutorial which you can find via this URL or the QR code you can see on this slide
- On the landing page, you'll find the installation instuctions so if you haven't already please follow them to set up your environment
- You'll also find all exercises and slides for the tutorial. For example, to access this presentation go to slides > introduction
:::

# What is DataLad?

## A community project

::: {.incremental}
- 10+ years of ongoing development & maintenance [^1] 
- 100+ contributors across core, extensions, and Handbook :
- started by:
  - Michael Hanke (now: Psychoinformatics Lab, Forschungszentrum JÃ¼lich)
  - Yaroslav Halchenko (now: Center for Open Neuroscience, Dartmouth College)
- owes a lot to git-annex by Joey Hess & contributors
:::

[^1]: https://doi.org/10.34734/FZJ-2025-01847


## A piece of software

::: {.incremental}
- Software for data management
- Written in Python
- Based on git and git-annex
- FOSS (MIT license)
:::


## Exhaustive tracking of research components

![](img/vamp_0_start.png)
Well-structured datasets (using community standards), and portable computational environments --- and their evolution --- are the precondition for reproducibility

:::: {.columns}

::: {.column width="50%"}

```
# turn any directory into a dataset
# with version control

% datalad create <directory>
```

:::

::: {.column width="50%"}

```
# save a new state of a dataset with
# file content of any size

% datalad save
```

:::

::::

## Capture computational provenance

![](img/vamp_1_provcapture.png)
Which data were needed at which version, as input into which code, running with what parameterization in which
computional environment, to generate an outcome?

:::: {.columns}
::: {.column width="50"}

```
# execute any command and capture its output
# while recording all input versions too

% datalad run --input ... --output ... <command>

```

:::
::::

## Exhaustive capture enables portability

![](img/vamp_2_pushtocloud.png)
Precise identification of data and computational environments, combined for provenance records form a comprehensive and portable data structure, capturing all aspects of an investigation.

```
# transfer data and metadata to other sites and services with fine-grained access control for dataset components

% datalad push --to <site-or-service>
```

## Reproducibility strengthens trust
![](img/vamp_3_reproduce.png)
Outcomes of computational transformations can be validated by authorized 3rd-parties. This enables audits, promotes accountability, and streamlines automated "upgrades" of outputs.

:::: {.columns}

::: {.column width="50%"}

```
# obtain dataset (initially only identity,
# availability, and provenance metadata)

% datalad clone <url>
```

:::

::: {.column width="50%"}

```
# immediately actionable provenance records
# full abstraction of input data retrieval

% datalad rerun <commit|tag|range>
```

:::

::::


## Ultimate goal: (re)usability

![](img/vamp_4_reuse.png)

Verifiable, portable, self-contained data structures that track all aspects of an investigation exhaustively can be (re)used as modular components in larger contexts --- propagating their traits

```
# declare a dependency on another dataset and
# reuse it at particular state in a new context

% datalad clone -d <superdataset> <path-in-dataset>
```

## Hands-on: Working with a DataLad Dataset

- Open the **Exercises Part 1** on the tutorial website ðŸ“–
- Each section starts with a table that contains all required commands ðŸ’»
- Feel free to chat with your neighbor and check the solutions ðŸ’¡

<iframe src="https://olebialas.github.io/DataLad-EuroScipy25/" width="100%" height="400px" frameborder="1" ></iframe>

::: {.notes}
- Let's move to out first set of exercises!
- You can find them at Exercises > Part 1
- Each section starts with a table that lists all required commands
- Below every exercise there is an expandable box with the solution you can check
- Don't worry if you don't complete all exercises, this is not required for the rest of the tutorial and you can always come back to the website
- If you have andy questions or problems during the exercises just raise your hand and we'll be with you
:::

## Hands-on: Working with a DataLad Dataset

:::{.timer #UNIQUE-ID seconds=1200 starton=interaction}
:::
![](./img/qr.png){.absolute top=50 right=200 width="300" height="300"}

- Website: [olebialas.github.io/DataLad-EuroScipy25](https://olebialas.github.io/DataLad-EuroScipy25/)
- Go to: *Exercises* > *Part1: Working with DataLad Datasets*


