---
title: "Part 3: Creating Backups and Sharing DataLad Datasets"
format: html
---

## Creating a Backup

| Command | Description |
| --- | --- |
| `git init --bare ~/mydir`| Create a `--bare` repository called `mydir` in the home directory (on Linux/macOS) |
| `git init --bare "$env:USERPROFILE\mydir"` | Create a `--bare` repository called `mydir` in the home directory (on Windows) |
| `datalad siblings` | List all siblings of the current dataset |
| `datalad sibings add --name new --url ~/mydir` | Add the repository at `~/mydir` as a new sibling with the name `new` |
| `datalad push --to new` | Push the dataset content to the sibling named `new` |

:::{#exr-}
List all `siblings` of the current dataset.
:::
::: {.callout-tip collapse="true"}
## Solution
```bash
datalad siblings
```
:::

:::{#exr-}
Initialize a `--bare` git repository at a path outside of this dataset.
:::
::: {.callout-tip collapse="true"}
## Solution
On Linux/macOS
```bash
git init --bare ~/penguins_backup
```
On Windows
```bash
git init --bare $env:USERPROFILE\penguins_backup
```
:::

:::{#exr-}
`add` a new sibling to the dataset using the path to the newly created git repository as the `--url`.
Then, list all `siblings` to confirm it was added.
:::
::: {.callout-tip collapse="true"}
## Solution
```bash
datalad siblings add --name backup --url ~/penguins_backup
datalad siblings
```
:::

:::{#exr-}
Push the dataset to the new sibling.
:::
::: {.callout-tip collapse="true"}
## Solution
```bash
datalad push --to backup
```
:::

:::{#exr-}
Move to a directory outside of this dataset and `clone` the new sibling dataset.
:::
::: {.callout-tip collapse="true"}
## Solution
```bash
cd ..
datalad clone ~/penguins_backup
```
:::


## BONUS: Sharing your Dataset online


| Command | Description |
| --- | --- |
| `ssh-keygen` | Generate a public and private authentication key pair |
| `datalad siblings` | List all siblings of the current dataset |
| `datalad sibings add --name gin --url git@gin.g-node.org:/user/repo.git` | Add the gin repository at `/https://gin.g-node.org/user/repo` as a new sibling with the name `gin` |
| `datalad push --to gin` | Push the dataset content to the sibling named `gin` |

:::{#exr-}
Use `ssh-keygen` to generate a public and private key pair (you don't have to use a passphrase).
Note the location where the public key is stored, e.g. `.ssh/id_ed25519.pub`.
Open the `.pub` file and copy the whole content --- it should look something like this: `ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBOYcoRKZZLWA4FWECpW2K/fTOvuRYXBnBA6gcea2bFq <user>@<computer>`
:::
::: {.callout-tip collapse="true"}
## Solution
```bash
ssh-keygen
```
:::

:::{#exr-}
Login in to your [GIN account](https://gin.g-node.org/), go to your user settings and add the copied ssh key.
Now datalad should be able to connect to your GIN account!
![](https://handbook.datalad.org/en/latest/_images/GIN_SSH_1.png)
:::

:::{#exr-}
Create a new repository on GIN, make sure to NOT initialize it with a README.
![](https://handbook.datalad.org/en/latest/_images/GIN_newrepo.png)
:::

:::{#exr-}
`add` a new sibling to the dataset using the `--url` of the newly created gin repository and confirm the connection.
Then, list all `siblings` to confirm it was added.
:::
::: {.callout-tip collapse="true"}
## Solution
For the repository in the image above, the command would look like this:
```bash
datalad siblings add --name gin --url git@gin.g-node.org:/adswa/DataLad-101.git
```
:::

:::{#exr-}
Push the dataset to the new GIN sibling. Then, open the repository in your browser to confirm the content was pushed.
:::
::: {.callout-tip collapse="true"}
## Solution
```bash
datalad push --to gin
```
:::

:::{#exr-}
Move to a directory outside of this dataset and `clone` the new GIN sibling.
:::
::: {.callout-tip collapse="true"}
## Solution
For the repository in the image above, the command would look like this:
```bash
cd ..
datalad clone datalad clone https://gin.g-node.org/adswa/DataLad-101
```
:::

