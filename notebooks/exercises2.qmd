---
title: "Part 2: Tracking Changes in DataLad Datasets"
format: html
jupyter: bash
---


```{bash}
#| echo: false
cd penguins
```

## Modifying a Dataset

DataLad keeps track of all changes made to your dataset.
In this section, you will add new content to the `penguins` dataset and see how these changes are tracked in the `git log` of your repository.

| Command | Description |
| --- | --- |
| `datalas status` | Show any untracked changes in the current dataset |
| `datalad save` | Save any untracked changes in the current dataset |
| `datalad save -m "hi"` | Save untracked changes and add the message `"hi"` |
| `datalad unlock file.txt` | Unlock `file.txt` to make it modifiable |
| `git log` | View the dataset's history, stored in the `git log` |
| `git log -3` | View the last `3` entries in the `git log` |

:::{#exr-}
Create a new file in the `penguins` folder called `penguin_species.txt` and add the species names *gentoo* and *adelie*. Then, save the file and run `datalad status` to see the untracked changes.
:::
::: {.callout-tip collapse="true"}
## Solution
```{bash}
#| output: false
echo -e "gentoo\adelie" > penguin_species.txt
datalad status
```
:::

:::{#exr-}
Use `datalad save` to save the untracked changes with the message `"list penguin species"`.
:::
::: {.callout-tip collapse="true"}
## Solution
```{bash}
datalad save -m "list penguin species"
```
:::

:::{#exr-}
View the most recent entry in the `git log`
:::
::: {.callout-tip collapse="true"}
## Solution
```{bash}
git log -1
```
:::

:::{#exr-}
Use `datalad unlock` to unlock the `penguin_species.txt` file and append *chinstrap* to the list. Then, run `datalad save` again with a message to save the changes
:::
::: {.callout-tip collapse="true"}
## Solution
```{bash}
#| output: false
datalad unlock penguin_species.txt
echo -e "chinstrap" >> pegnuin_species.txt
datalad save -m "add chinstrap"
```
:::

:::{#exr-}
View the last two entries in the `git log`
:::
::: {.callout-tip collapse="true"}
## Solution
```{bash}
#| output: false
git log -2
```
:::

## Running Scripts with DataLad

Often, we won't edit our dataset manually but run scripts that do so.
In this section you will use DataLad to run Python scripts and track the changes made by them.
You are also going to use the dataset's history to re-run the commands.

| Command | Description |
| --- | --- |
|`datalad run "python script.py"` | Run the `python` script `script.py` |
|`datalad run --input "data.csv" --output "figure.png" "python script.py"` | Run `script.py` with input `"data.csv"` and output `"figure.png"`|
| `git log` | View the dataset's histroy stored in the `git log` |
| `datalad rerun a268d8ca22b6` | Rerun the command from the `git log` with the checksum starting with `a268d8ca22b6e87959` |
| `datalad rerun --since a268d8ca22b6` | Rerun ALL commands `--since` the one with the checksum starting with `a268d8ca22b6e87959` |


:::{#exr-}
Try to run the `python` script in `code/aggregate_culmen_data.py`. What error message do you observe?
:::
::: {.callout-tip collapse="true"}
## Solution
```{bash}
#| eval: false
datalad run "python code/aggregate_culmen_data.py"
```
You should see `FileNotFoundError: [Errno 2] No such file or directory` because the dataset does not contain the annexed content of the required files.
:::

:::{#exr-csv}
(Put all tables in the same folder to avoid complicated glob pattern)
Run the same script with the `data/` folder as `--input` and the file `"results/penguin_culmens.csv"` as `--output`.
:::
::: {.callout-tip collapse="true"}
## Solution
```{bash}
#| output: false
datalad run --input "data/" --output "results/penguin_culmens.csv" "python code/aggregate_culmen_data.py"
```
:::

:::{#exr-}
View the most recent entry in the `git log`
:::
::: {.callout-tip collapse="true"}
## Solution
```{bash}
#| output: false
git log -1
```
:::

:::{#exr-}
Open the git log to find the checksum of the commit for the run command from @exr-csv and re-run it.
:::
::: {.callout-tip collapse="true"}
## Solution
In the code below, `$(git rev-parse HEAD)` gets the checksum for the latest commit but you can also open `git log` and copy-paste the checksum.
```{bash}
#| output: false
datalad rerun $(git rev-parse HEAD)
```
:::

:::{#exr-}
Run the script `code/plot_culmen_length_vs_depth.py` --- it takes `results/penguin_culmens.csv` as `--input` and produces `results/culmen_length_vs_depth.png` as an output.
:::
::: {.callout-tip collapse="true"}
## Solution
```{bash}
#| output: false
datalad run --input "results/penguin_culmens.csv" --output "results/culmen_length_vs_depth.png" "python code/plot_culmen_length_vs_depth.py"
```
:::

:::{#exr-}
Open the git log to find the checksum of the commit for the run command from @exr-csv and re-run everything `--since` this commit (i.e. the data aggregation and plotting scripts).
:::
::: {.callout-tip collapse="true"}
## Solution
In the code below, `$(git rev-parse HEAD)` gets the checksum for the second latest commit but you can also open `git log` and copy-paste the checksum.
```{bash}
#| output: false
datalad rerun --since $(git rev-parse HEAD~1)
```
:::

